# Описание проекта

Это веб-приложение-игра, запускаемое внутри Telegram, в котором пользователи взаимодействуют с коллекционными карточками и наборами. Все данные получаются только через Apollo GraphQL, а типы и схемы описываются в @/services/queries.ts.

## Технологический стек
- React
- Apollo Client (GraphQL)
- Vite

## Архитектурные правила

1. **Данные и типы**
   - Все типы и структуры данных для GraphQL-запросов и мутаций описываются только в @/services/queries.ts. Это основной источник правды для типов.
   - Любые новые поля или сущности сначала добавляются в GraphQL-схему и типы в queries.ts.

2. **Apollo и работа с данными**
   - Глобальный ApolloProvider подключается на уровне корневого компонента.
   - Все запросы и мутации выполняются только через Apollo (useQuery/useMutation). REST-запросы и другие способы получения данных запрещены.
   - Кэш Apollo используется по умолчанию, локальное состояние — только для UI.
   - Обработка ошибок и лоадеров реализуется в страницах (pages), а не в компонентах.

3. **Структура проекта**
   - В папке @/components размещаются только presentational-компоненты ("глупые"): без бизнес-логики, только пропсы и рендер.
   - Вся бизнес-логика, работа с Apollo, обработка ошибок и состояния — только в @/pages.
   - Передача данных между страницей и компонентами — только через пропсы.
   - Использование хуков (useState/useEffect/useQuery) разрешено только в страницах.

4. **Роутинг и навигация**
   - Все маршруты приложения описываются в @/navigation/routes.tsx.
   - Для защищённых маршрутов используется компонент ProtectedRoute.

5. **Стилизация**
   - Используются CSS-модули или scoped CSS-файлы для компонентов.
   - Именование классов и файлов стилей — по BEM или camelCase.

6. **Тестирование**
   - (Если используется) Все тесты располагаются рядом с тестируемым компонентом или страницей.
   - Покрытие тестами не обязательно, но рекомендуется для ключевых компонентов.

7. **Best practices и ограничения**
   - Запрещено использовать any, REST, localStorage, и любые запросы вне GraphQL/Apollo.
   - Не смешивать компоненты и страницы в одной папке.
   - Все бизнес-правила и обработка данных — только в pages.
   - Для новых сущностей всегда сначала обновлять GraphQL и queries.ts.

## Основные сущности
- @Card.tsx — игровая карточка
- @PackSlider.tsx — карусель наборов (главная страница), данные через ShowcaseViewDto
- @/components — только presentational-компоненты
- @/pages — только бизнес-логика, работа с данными, Apollo
- @/navigation — роутинг и защита маршрутов

---

**Если появляются новые правила или особенности — обязательно дополнять этот файл!**
description:
globs:
alwaysApply: false
---
