import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button, Placeholder, Spinner, Text, Title } from '@telegram-apps/telegram-ui';
import { useSignal } from '@telegram-apps/sdk-react';
import { initDataState } from '@telegram-apps/sdk-react';

import { authService } from '@/services/authService';
import { gameStateService } from '@/services/gameStateService';
import { Page } from '@/components/Page';

export const LoginPage: React.FC = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isCheckingSession, setIsCheckingSession] = useState(true);
  const [requestInfo, setRequestInfo] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const initData = useSignal(initDataState);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  const isDev = import.meta.env.DEV;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    checkExistingSession();
  }, []);

  const checkExistingSession = async () => {
    setIsCheckingSession(true);
    try {
      const result = await authService.restoreSession();
      if (result.success && result.user) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∏–≥—Ä—É
        await loadGameData();
        navigate('/');
        return;
      }

      // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å, –Ω–æ –µ—Å—Ç—å Telegram –¥–∞–Ω–Ω—ã–µ - –ø—ã—Ç–∞–µ–º—Å—è –ª–æ–≥–∏–Ω
      if (initData?.user) {
        console.log('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥–∏–Ω...');
        await performLogin();
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç Telegram –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ
        setRequestInfo(`‚ùå Telegram –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
üì± –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ Telegram
üîó URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å: https://t.me/your_bot/app`);
      }
    } catch (error) {
      console.error('Session check error:', error);
    } finally {
      setIsCheckingSession(false);
    }
  };

  const performLogin = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
      const baseUrl = 'https://vectorfield4-f1cardsbot-d047.twc1.net';
      const telegramData = authService.getTelegramUserData();
      const requestDetails = `üåê –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: ${baseUrl}/api/Players/login\nüìã –ú–µ—Ç–æ–¥: GET\nüîê –ó–∞–≥–æ–ª–æ–≤–∫–∏:\n  Authorization: tma ${telegramData.rawInitData.substring(0, 50)}...\n  Content-Type: application/json\nüì± Telegram –¥–∞–Ω–Ω—ã–µ: ${telegramData.firstName} (@${telegramData.username})`;
      setRequestInfo(requestDetails);
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ª–æ–≥–∏–Ω:', requestDetails);
      // –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ Telegram
      const loginResult = await authService.loginToGame();
      if (!loginResult.success) {
        setError(loginResult.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É');
        setSuccess(false);
        return;
      }
      if (!loginResult.user) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        setSuccess(false);
        return;
      }
      if (!loginResult.user.isPlayer) {
        setError('–ê–∫–∫–∞—É–Ω—Ç –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        setSuccess(false);
        return;
      }
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      await loadGameData();
      setSuccess(true);
      setError(null);
      navigate('/'); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ IndexPage –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
    } catch (error) {
      console.error('Login error:', error);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ');
      setSuccess(false);
    }
  };

  const handleLogin = async () => {
    setIsLoading(true);
    setError(null);

    await performLogin();

    setIsLoading(false);
  };

  const loadGameData = async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ –≤–∏—Ç—Ä–∏–Ω—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      await Promise.all([
        gameStateService.loadCollection(),
        gameStateService.loadAvailableShowcase()
      ]);
    } catch (error) {
      console.error('Failed to load game data:', error);
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Ö–æ–¥, –µ—Å–ª–∏ –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
    }
  };

  const handleTryAgain = async () => {
    setIsLoading(true);
    setError(null);
    setRequestInfo(null);
    await performLogin();
    setIsLoading(false);
  };

  const handleForgetMe = async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      return;
    }

    setIsLoading(true);
    try {
      const result = await authService.forgetMe();
      if (result.success) {
        alert('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        window.location.reload();
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞');
      }
    } catch (error) {
      console.error('Forget me error:', error);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞');
    } finally {
      setIsLoading(false);
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º spinner –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
  if (isCheckingSession) {
    return (
      <Page>
        <div style={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          minHeight: '400px',
          flexDirection: 'column',
          gap: '16px'
        }}>
          <Spinner size="l" />
          <Text>–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é...</Text>
        </div>
      </Page>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω –ª–æ–≥–∏–Ω–∞
  return (
    <Page back={false}>
      <div style={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        padding: '32px 16px',
        minHeight: '60vh',
        justifyContent: 'center'
      }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div style={{
          textAlign: 'center',
          marginBottom: '32px'
        }}>
          <Title level="1" style={{ marginBottom: '8px' }}>
            üîê –í—Ö–æ–¥ –≤ –∏–≥—Ä—É
          </Title>
          <Text style={{ color: '#999' }}>
            –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
          </Text>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram */}
        {/* –£–±–∏—Ä–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–ø—É—Ç username */}
        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ —É—Å–ø–µ—Ö–µ */}
        {success ? (
          <div style={{
            background: '#44C767',
            borderRadius: '8px',
            padding: '12px',
            marginBottom: '16px',
            width: '100%',
            maxWidth: '300px'
          }}>
            <Text style={{ color: 'white', textAlign: 'center' }}>
              –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            </Text>
          </div>
        ) : isDev && error && (
          <div style={{
            background: '#FF4444',
            borderRadius: '8px',
            padding: '12px',
            marginBottom: '16px',
            width: '100%',
            maxWidth: '300px'
          }}>
            <Text style={{ color: 'white', textAlign: 'center' }}>
              {error}
            </Text>
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ (—Ç–æ–ª—å–∫–æ –≤ dev) */}
        {isDev && requestInfo && (
          <div style={{
            background: '#2B2D35',
            borderRadius: '8px',
            padding: '16px',
            marginBottom: '16px',
            width: '100%',
            maxWidth: '400px',
            fontFamily: 'monospace',
            fontSize: '12px',
            whiteSpace: 'pre-line',
            lineHeight: '1.4'
          }}>
            <Text style={{ color: '#00D6FF', marginBottom: '8px' }} weight="2">
              üì° –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:
            </Text>
            <Text style={{ color: '#CCC' }}>
              {requestInfo}
            </Text>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (—Ç–æ–ª—å–∫–æ –≤ dev) */}
        {isDev && (
          <div style={{
            display: 'flex',
            flexDirection: 'column',
            gap: '12px',
            width: '100%',
            maxWidth: '300px'
          }}>
            <Button
              size="l"
              stretched
              style={{ background: '#44C767', color: 'white', border: 'none' }}
              onClick={handleLogin}
              disabled={isLoading}
            >
              {isLoading ? <Spinner size="l" /> : '–í–æ–π—Ç–∏'}
            </Button>

            {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω) */}
            {authService.isAuthenticated() && (
              <Button
                mode="outline"
                size="s"
                stretched
                onClick={handleForgetMe}
                disabled={isLoading}
                style={{ marginTop: '16px' }}
              >
                –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
              </Button>
            )}
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ */}
        {!initData?.user && (
          <Placeholder
            style={{ marginTop: '32px' }}
            header="–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            description="–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ Telegram"
          >
            <div style={{
              width: '144px',
              height: '144px',
              background: '#333',
              borderRadius: '50%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '48px'
            }}>
              üîí
            </div>
          </Placeholder>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–µ */}
        <div style={{
          marginTop: '40px',
          textAlign: 'center',
          maxWidth: '300px'
        }}>
          <Text style={{ color: '#666', fontSize: '14px', lineHeight: '1.4' }}>
            –°–æ–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ä—Ç—ã –≥–æ–Ω—â–∏–∫–æ–≤, –∫–æ–º–∞–Ω–¥ –∏ —Ç—Ä–∞—Å—Å –§–æ—Ä–º—É–ª—ã-1. 
            –£–ª—É—á—à–∞–π—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏!
          </Text>
        </div>
      </div>
    </Page>
  );
}; 