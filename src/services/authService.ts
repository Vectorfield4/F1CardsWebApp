import { initDataState, initDataRaw } from '@telegram-apps/sdk-react';

export interface TelegramUserInfo {
  userId: string;
  username: string;
  firstName: string;
  photoUrl: string;
  isPlayer: boolean;
}

export interface PlayerDetailsDto {
  id: string;
  displayName: string;
  email?: string;
  userName: string;
  registrationDate: string;
  rating: number;
  gold: number;
  dust: number;
  daysInGame: number;
  lastLoginDate: string;
  cardsCount: number;
  cardSetsCount: number;
  isBanned: boolean;
}

class AuthService {
  private baseUrl: string;
  private currentUser: TelegramUserInfo | null = null;
  private playerDetails: PlayerDetailsDto | null = null;
  private initData: string | null = null;

  constructor() {
    this.baseUrl = import.meta.env.VITE_BACKEND_API || 'https://vectorfield4-f1cardsbot-d047.twc1.net';
    console.log('AuthService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å URL:', this.baseUrl);
    if (!import.meta.env.VITE_BACKEND_API) {
      console.log('–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è URL —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å VITE_BACKEND_API=–≤–∞—à_url');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getTelegramUserData() {
    let initDataObj = initDataState();
    let rawData = initDataRaw();

    console.log('üì± –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Telegram:');
    console.log('- initDataObj –∏–∑ SDK:', !!initDataObj);
    console.log('- rawData –∏–∑ SDK:', !!rawData);

    const useEnvRawData = !rawData && import.meta.env.VITE_TELEGRAM_INIT_DATA_RAW;

    // –ï—Å–ª–∏ –Ω–µ—Ç rawData –∏–∑ SDK, –ø—Ä–æ–±—É–µ–º –∏–∑ .env
    if (useEnvRawData) {
      console.log('‚ö†Ô∏è rawData –∏–∑ SDK –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º VITE_TELEGRAM_INIT_DATA_RAW.');
      rawData = import.meta.env.VITE_TELEGRAM_INIT_DATA_RAW;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç initDataObj, –Ω–æ –µ—Å—Ç—å rawData, –ø–∞—Ä—Å–∏–º –µ–≥–æ.
    // –¢–∞–∫–∂–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º, –µ—Å–ª–∏ rawData –≤–∑—è—Ç –∏–∑ .env –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏.
    if ((!initDataObj || useEnvRawData) && rawData) {
      try {
        console.log('‚ÑπÔ∏è –ü–∞—Ä—Å–∏–º rawData...');
        const params = new URLSearchParams(rawData);
        const userStr = params.get('user');
        if (userStr) {
          // —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ —Ç–æ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç initDataState()
          initDataObj = {
            user: JSON.parse(decodeURIComponent(userStr)),
          } as any; // any, —Ç.–∫. –º—ã –Ω–µ –∑–Ω–∞–µ–º –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
          console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ rawData:', initDataObj?.user);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ rawData:', error);
      }
    }
    
    if (!initDataObj?.user) {
      console.error('‚ùå Telegram user data –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      throw new Error('Telegram user data not available');
    }

    if (!rawData) {
      console.error('‚ùå Telegram rawInitData –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      throw new Error('Telegram rawInitData not available');
    }

    console.log('‚úÖ Telegram –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    console.log('- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', initDataObj.user.first_name, initDataObj.user.username);
    console.log('- rawInitData preview:', rawData.substring(0, 100) + '...');

    return {
      telegramId: initDataObj.user.id,
      username: initDataObj.user.username,
      firstName: initDataObj.user.first_name,
      lastName: initDataObj.user.last_name,
      photoUrl: initDataObj.user.photo_url,
      rawInitData: rawData,
    };
  }


  // –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
  logout() {
    this.currentUser = null;
    this.playerDetails = null;
    this.initData = null;
    localStorage.removeItem('gameInitData');
    localStorage.removeItem('gameUser');
    localStorage.removeItem('playerDetails');
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
  async forgetMe(): Promise<{ success: boolean; error?: string }> {
    if (!this.initData) {
      return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' };
    }

    try {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const response = await fetch(`${this.baseUrl}/api/Players/forget`, {
        method: 'DELETE',
        headers: this.getAuthHeaders()
      });

      if (!response.ok) {
        return { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞' };
      }

      this.logout();
      return { success: true };
    } catch (error) {
      console.error('Forget me error:', error);
      return { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCurrentUser(): TelegramUserInfo | null {
    return this.currentUser;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
  getPlayerDetails(): PlayerDetailsDto | null {
    return this.playerDetails;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ init data –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  getInitData(): string | null {
    return this.initData;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  isAuthenticated(): boolean {
    return !!this.initData && !!this.currentUser;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–æ–∫–æ–º
  isPlayer(): boolean {
    return this.currentUser?.isPlayer ?? false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
  getAuthHeaders(): Record<string, string> {
    const headers: Record<string, string> = {
      'Content-Type': 'application/json'
    };

    if (this.initData) {
      headers['Authorization'] = `tma ${this.initData}`;
      console.log('üîê –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –¥–ª–∏–Ω–∞ initData:', this.initData.length);
    } else {
      console.warn('‚ö†Ô∏è InitData –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å initData –∑–∞–Ω–æ–≤–æ
      try {
        const telegramData = this.getTelegramUserData();
        if (telegramData.rawInitData) {
          this.initData = telegramData.rawInitData;
          headers['Authorization'] = `tma ${this.initData}`;
          console.log('‚úÖ InitData –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ Telegram SDK');
        }
      } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å initData:', error);
      }
    }

    return headers;
  }
}

export const authService = new AuthService(); 