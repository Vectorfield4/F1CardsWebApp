import { authService } from './authService';

// –¢–∏–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ API —Å—Ö–µ–º—ã
export interface Card {
  id: number;
  name: string;
  imageUrl?: string;
  description?: string;
  cardTypeId: number;
  rarityId: number;
  tags?: Tag[];
}

export interface PlayerCard {
  id: number;
  playerId: string;
  cardId: number;
  level: number;
  quantity: number;
  obtainedAt: string;
  tags?: Tag[];
}

export interface CardSet {
  id: number;
  name: string;
  description?: string;
  imageUrl?: string;
  goldPrice: number;
  rewardCount: number;
}

export interface ShowcaseViewDto {
  cardSetId: number;
  count: number;
}

export interface PackOpeningResult {
  cards: Card[];
  totalOpens: number;
}

export interface Tag {
  id: number;
  tagName: string;
  lastUpdate: string;
}

export interface Rarity {
  id: number;
  name: string;
  color?: string;
  dropChance: number;
}

export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}

class GameStateService {
  private baseUrl: string = import.meta.env.BACKEND_API || 'http://localhost:3001';
  private collection: PlayerCard[] = [];
  private availableShowcase: ShowcaseViewDto | null = null;
  private listeners: Set<() => void> = new Set();

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
  private async makeRequest(
    endpoint: string, 
    options: RequestInit,
    description: string
  ): Promise<Response> {
    const url = `${this.baseUrl}${endpoint}`;
    const headers = authService.getAuthHeaders();
    
    console.log(`üåê ${description}:`);
    console.log(`- URL: ${url}`);
    console.log(`- Method: ${options.method || 'GET'}`);
    console.log(`- Headers:`, headers);
    if (options.body) {
      console.log(`- Body:`, options.body);
    }

    const response = await fetch(url, {
      ...options,
      headers: { ...headers, ...options.headers }
    });

    console.log(`üì° –û—Ç–≤–µ—Ç –æ—Ç ${description}:`);
    console.log(`- Status: ${response.status} ${response.statusText}`);
    console.log(`- OK: ${response.ok}`);

    return response;
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  subscribe(listener: () => void) {
    this.listeners.add(listener);
    return () => this.listeners.delete(listener);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  private notifyListeners() {
    this.listeners.forEach(listener => listener());
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
  async loadCollection(): Promise<ApiResponse<PlayerCard[]>> {
    try {
      const response = await this.makeRequest(
        '/api/Collection',
        { method: 'GET' },
        '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞'
      );

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', errorText);
        return {
          success: false,
          error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (${response.status})`
        };
      }

      const collection: PlayerCard[] = await response.json();
      this.collection = collection;
      this.notifyListeners();

      console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${collection.length} –∫–∞—Ä—Ç`);
      return { success: true, data: collection };
    } catch (error) {
      console.error('‚ùå Load collection error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤ (–≤–∏—Ç—Ä–∏–Ω—ã)
  async loadAvailableShowcase(): Promise<ApiResponse<ShowcaseViewDto>> {
    try {
      const response = await fetch(`${this.baseUrl}/api/Showcases/available`, {
        method: 'GET',
        headers: authService.getAuthHeaders()
      });

      if (!response.ok) {
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏—Ç—Ä–∏–Ω—ã'
        };
      }

      const showcase: ShowcaseViewDto = await response.json();
      this.availableShowcase = showcase;
      this.notifyListeners();

      return { success: true, data: showcase };
    } catch (error) {
      console.error('Load showcase error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–∫–∞
  async openPack(cardSetId: number): Promise<ApiResponse<PackOpeningResult>> {
    try {
      const response = await fetch(`${this.baseUrl}/api/Opening`, {
        method: 'POST',
        headers: authService.getAuthHeaders(),
        body: JSON.stringify({ cardSetId })
      });

      if (!response.ok) {
        const errorData = await response.json();
        return {
          success: false,
          error: errorData.title || '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–∫–∞'
        };
      }

      const result: PackOpeningResult = await response.json();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–∫–∞
      await this.loadCollection();
      
      return { success: true, data: result };
    } catch (error) {
      console.error('Open pack error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
  async getUpgradeCost(playerCardId: number): Promise<ApiResponse<number>> {
    try {
      const response = await fetch(`${this.baseUrl}/api/Collection/upgrade?playerCardId=${playerCardId}`, {
        method: 'GET',
        headers: authService.getAuthHeaders()
      });

      if (!response.ok) {
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è'
        };
      }

      const cost: number = await response.json();
      return { success: true, data: cost };
    } catch (error) {
      console.error('Get upgrade cost error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
  async upgradeCard(playerCardId: number): Promise<ApiResponse<boolean>> {
    try {
      const response = await fetch(`${this.baseUrl}/api/Collection/upgrade?playerCardId=${playerCardId}`, {
        method: 'POST',
        headers: authService.getAuthHeaders()
      });

      if (!response.ok) {
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—Ä—Ç—ã'
        };
      }

      const result: boolean = await response.json();
      
      if (result) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è
        await this.loadCollection();
      }

      return { success: true, data: result };
    } catch (error) {
      console.error('Upgrade card error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–±–æ—Ä–∫–∏ –∫–∞—Ä—Ç—ã
  async getDisassembleCost(playerCardId: number): Promise<ApiResponse<number>> {
    try {
      const response = await fetch(`${this.baseUrl}/api/Collection/disassemble?playerCardId=${playerCardId}`, {
        method: 'GET',
        headers: authService.getAuthHeaders()
      });

      if (!response.ok) {
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–±–æ—Ä–∫–∏'
        };
      }

      const cost: number = await response.json();
      return { success: true, data: cost };
    } catch (error) {
      console.error('Get disassemble cost error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –†–∞–∑–±–æ—Ä–∫–∞ –∫–∞—Ä—Ç—ã
  async disassembleCard(playerCardId: number): Promise<ApiResponse<boolean>> {
    try {
      const response = await fetch(`${this.baseUrl}/api/Collection/disassemble?playerCardId=${playerCardId}`, {
        method: 'DELETE',
        headers: authService.getAuthHeaders()
      });

      if (!response.ok) {
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∫–∏ –∫–∞—Ä—Ç—ã'
        };
      }

      const result: boolean = await response.json();
      
      if (result) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ —Ä–∞–∑–±–æ—Ä–∫–∏
        await this.loadCollection();
      }

      return { success: true, data: result };
    } catch (error) {
      console.error('Disassemble card error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç
  async loadAllCards(start?: number, end?: number): Promise<ApiResponse<Card[]>> {
    try {
      let url = `${this.baseUrl}/api/Cards`;
      const params = new URLSearchParams();
      
      if (start !== undefined) params.append('_start', start.toString());
      if (end !== undefined) params.append('_end', end.toString());
      
      if (params.toString()) {
        url += '?' + params.toString();
      }

      const response = await fetch(url, {
        method: 'GET',
        headers: authService.getAuthHeaders()
      });

      if (!response.ok) {
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç'
        };
      }

      const cards: Card[] = await response.json();
      return { success: true, data: cards };
    } catch (error) {
      console.error('Load cards error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–¥–∫–æ—Å—Ç–µ–π
  async loadRarities(): Promise<ApiResponse<Rarity[]>> {
    try {
      const response = await fetch(`${this.baseUrl}/api/Rarities`, {
        method: 'GET',
        headers: authService.getAuthHeaders()
      });

      if (!response.ok) {
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–¥–∫–æ—Å—Ç–µ–π'
        };
      }

      const rarities: Rarity[] = await response.json();
      return { success: true, data: rarities };
    } catch (error) {
      console.error('Load rarities error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–æ–≤ –∫–∞—Ä—Ç
  async loadCardSets(): Promise<ApiResponse<CardSet[]>> {
    try {
      const response = await fetch(`${this.baseUrl}/api/CardSets`, {
        method: 'GET',
        headers: authService.getAuthHeaders()
      });

      if (!response.ok) {
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–±–æ—Ä–æ–≤ –∫–∞—Ä—Ç'
        };
      }

      const cardSets: CardSet[] = await response.json();
      return { success: true, data: cardSets };
    } catch (error) {
      console.error('Load card sets error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  getCollection(): PlayerCard[] {
    return this.collection;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –≤–∏—Ç—Ä–∏–Ω—ã
  getAvailableShowcase(): ShowcaseViewDto | null {
    return this.availableShowcase;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞
  getCurrencies() {
    const playerDetails = authService.getPlayerDetails();
    return {
      gold: playerDetails?.gold || 0,
      dust: playerDetails?.dust || 0
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
  getPlayerStats() {
    const playerDetails = authService.getPlayerDetails();
    if (!playerDetails) return null;

    return {
      daysInGame: playerDetails.daysInGame,
      cardsCount: playerDetails.cardsCount,
      cardSetsCount: playerDetails.cardSetsCount,
      rating: playerDetails.rating,
      registrationDate: playerDetails.registrationDate,
      lastLoginDate: playerDetails.lastLoginDate
    };
  }

  // –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ ID
  findPlayerCard(playerCardId: number): PlayerCard | undefined {
    return this.collection.find(card => card.id === playerCardId);
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç –ø–æ —É—Ä–æ–≤–Ω—é
  getCardsByLevel(level: number): PlayerCard[] {
    return this.collection.filter(card => card.level === level);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç (–ø–æ cardId)
  getUniqueCards(): PlayerCard[] {
    const uniqueCards = new Map<number, PlayerCard>();
    
    this.collection.forEach(card => {
      if (!uniqueCards.has(card.cardId)) {
        uniqueCards.set(card.cardId, card);
      }
    });
    
    return Array.from(uniqueCards.values());
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ AI
  async generateCards(): Promise<ApiResponse<boolean>> {
    try {
      const response = await this.makeRequest(
        '/api/Images/generate-cards',
        { method: 'POST' },
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ AI'
      );

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç:', errorText);
        return {
          success: false,
          error: `–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç (${response.status}): ${errorText}`
        };
      }

      console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      return { success: true, data: true };
    } catch (error) {
      console.error('‚ùå Generate cards error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç
  async syncCards(): Promise<ApiResponse<boolean>> {
    try {
      const response = await this.makeRequest(
        '/api/Images/sync-cards',
        { method: 'POST' },
        '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç'
      );

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç:', errorText);
        return {
          success: false,
          error: `–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç (${response.status}): ${errorText}`
        };
      }

      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      return { success: true, data: true };
    } catch (error) {
      console.error('‚ùå Sync cards error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
  async createCard(card: Omit<Card, 'id'>): Promise<ApiResponse<Card>> {
    try {
      const response = await fetch(`${this.baseUrl}/api/Cards`, {
        method: 'POST',
        headers: authService.getAuthHeaders(),
        body: JSON.stringify(card)
      });

      if (!response.ok) {
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã'
        };
      }

      const newCard: Card = await response.json();
      return { success: true, data: newCard };
    } catch (error) {
      console.error('Create card error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∫–∞—Ä—Ç
  async createCardSet(cardSet: Omit<CardSet, 'id'>): Promise<ApiResponse<CardSet>> {
    try {
      const response = await fetch(`${this.baseUrl}/api/CardSets`, {
        method: 'POST',
        headers: authService.getAuthHeaders(),
        body: JSON.stringify(cardSet)
      });

      if (!response.ok) {
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –∫–∞—Ä—Ç'
        };
      }

      const newCardSet: CardSet = await response.json();
      return { success: true, data: newCardSet };
    } catch (error) {
      console.error('Create card set error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç
  async loadCardTypes(): Promise<ApiResponse<any[]>> {
    try {
      const response = await this.makeRequest(
        '/api/CardTypes',
        { method: 'GET' },
        '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç'
      );

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç:', errorText);
        return {
          success: false,
          error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç (${response.status})`
        };
      }

      const cardTypes: any[] = await response.json();
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç: ${cardTypes.length}`);
      return { success: true, data: cardTypes };
    } catch (error) {
      console.error('‚ùå Load card types error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      };
    }
  }

  // –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ API
  async testAuthentication(): Promise<void> {
    console.log('üß™ === –¢–ï–°–¢ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –ò API ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const isAuth = authService.isAuthenticated();
    const currentUser = authService.getCurrentUser();
    const initData = authService.getInitData();
    
    console.log('üë§ –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
    console.log('- –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', isAuth);
    console.log('- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser?.firstName || '–ù–µ –Ω–∞–π–¥–µ–Ω');
    console.log('- InitData –¥–ª–∏–Ω–∞:', initData?.length || 0);
    
    if (!isAuth) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω —Å–Ω–∞—á–∞–ª–∞.');
      return;
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    const tests = [
      { name: '–ö–æ–ª–ª–µ–∫—Ü–∏—è', fn: () => this.loadCollection() },
      { name: '–í–∏—Ç—Ä–∏–Ω–∞', fn: () => this.loadAvailableShowcase() },
      { name: '–ù–∞–±–æ—Ä—ã –∫–∞—Ä—Ç', fn: () => this.loadCardSets() },
      { name: '–†–µ–¥–∫–æ—Å—Ç–∏', fn: () => this.loadRarities() },
      { name: '–¢–∏–ø—ã –∫–∞—Ä—Ç', fn: () => this.loadCardTypes() }
    ];

    for (const test of tests) {
      try {
        console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${test.name}`);
        const result = await test.fn();
        if (result.success) {
          console.log(`‚úÖ ${test.name}: —É—Å–ø–µ—Ö`);
        } else {
          console.error(`‚ùå ${test.name}: ${result.error}`);
        }
      } catch (error) {
        console.error(`üí• ${test.name}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞`, error);
      }
    }

    console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }
}

export const gameStateService = new GameStateService();

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (typeof window !== 'undefined') {
  (window as any).gameStateService = gameStateService;
  (window as any).authService = authService;
  
  console.log('üîß –°–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏:');
  console.log('- window.gameStateService.testAuthentication() - —Ç–µ—Å—Ç API');
  console.log('- window.authService.getCurrentUser() - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
  console.log('- window.gameStateService.generateCards() - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç');
} 